---
title: "대기업 본사 지도"
date: "2022-11-24" # 날짜 설정: now, last-modified
date-format: "YYYY년 MM월 DD일"
lang: kr
categories: ["지도", "대기업", "공정거래위원회", "로고"]
description: |
  공정거래위원회에서 지정한 상위 대기업 본사 주소를 기준으로 서울시 지도에 로고를 입혀 시각화 합니다.
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
author:
  - name: 이광춘
    url: https://www.linkedin.com/in/kwangchunlee/
    affiliation: 한국 R 사용자회
    affiliation-url: https://github.com/bit2r
title-block-banner: true
#title-block-banner: "#562457"
format:
  html:
    theme: flatly
    code-fold: false
    toc: true
    toc-depth: 2
    toc-title: 목차
    number-sections: true
    highlight-style: github    
    self-contained: true
link-citations: yes
filters:
   - lightbox      
lightbox: auto
---

![](../../images/company_logo.png)

# 데이터

대기업 주소를 지도에 로고를 입혀 시각화하기 위해 필요한 데이터는 다음과 같다.

1. 공정거래위원회 지정 최신 공시대상기업집단: [공정위 뉴스 2022년 대기업집단 지정결과](https://www.ftc.go.kr/www/selectReportUserView.do?key=10&rpttype=1&report_data_no=9580) [자료출처: www.ftc.go.kr]{.aside}
1. 

## 대기업 집단 순위

공정위 2022년 기준 공시대상 대기업집단 지정결과를 확인할 수 있다.

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(readxl)

rank_raw <- read_excel(glue::glue("{here::here()}/data/220428(조간) 2022년도 대기업집단 지정결과_별첨1.xlsx"), sheet = "22년", skip = 4)

rank_tbl <- rank_raw %>% 
  set_names(c("순위_22", "순위_21", "변동", "기업명", "동일인", "계열사_22", "계열사_21", "자산_22", "자산_21")) %>% 
  filter(변동 !="제외") %>% 
  select(기업명, 동일인, 계열사수=계열사_22, 자산총액 = 자산_22) %>% 
  mutate(계열사수 = parse_number(계열사수),
         자산총액 = parse_number(자산총액)/1000) %>% 
  filter(!is.na(기업명))

rank_tbl
```

## 본사 주소

fnguide 에서 [기업주소록](https://comp.fnguide.com/SVO2/ASP/SVD_CorpList.asp?pGB=1&gicode=A005930&cID=&MenuYn=Y&ReportGB=&NewMenuID=502&stkGb=)에서 엑셀파일로 가-하, A-Z, 0-9 기업본사주소가 담긴 정보를 다운로드 받아 후처리한다.

- `.xls` 파일을 `.xlsx` 파일 변환 
- 자세한 사항 [How To Convert Multiple Xls Files To Xlsx Files In Excel?](https://www.extendoffice.com/documents/excel/1349-excel-batch-convert-xls-to-xlsx.html#a2) 참조하여 VBA 스크립트로 처리한다.

```{r}
company_list <- fs::dir_ls(glue::glue("{here::here()}/data/company_xlsx"))

company_raw <- map_df(company_list, read_excel)

company_raw
```


## 데이터 결합

```{r}
rank_tbl %>% 
  left_join(company_raw, by = c("기업명" = "종목명")) %>% 
  filter(!is.na(본사주소))
```


# 데이터 시즌2

[KRX 정보데이터시스템](https://data.krx.co.kr/) 웹사이트에서 [시가총액 상위](http://data.krx.co.kr/contents/MMC/RANK/rank/MMCRANK001.cmd) 기업정보를 가져온다.
이를 앞선 상장사 주소정보와 매칭을 하게 되면 지오코딩을 위한 기본 데이터 준비는 마무리된다.

```{r}
marcap_raw <- read_excel(glue::glue("{here::here()}/data/krx_marcap_202211.xlsx"))

marcap_tbl <- marcap_raw %>% 
  mutate(시가총액 = 시가총액/10^12) %>% 
  select(종목명, 시가총액)

marcap_address <- marcap_tbl %>% 
  left_join(company_raw) %>% 
  filter(종목명 !="삼성전자우") %>% 
  mutate(본사주소 = ifelse(종목명 == "NAVER", "경기도 성남시 분당구 정자일로 95", 본사주소)) %>% 
  # SK 주소가 여러곳 찍힘 (KAKAO 버그인 듯...)
  mutate(본사주소 = case_when(종목명 == "SK" ~ "서울 종로구 서린동 99",
                              종목명 == "SK이노베이션" ~ "서울 종로구 서린동 99",
                              TRUE ~ 본사주소))

marcap_address %>% 
  write_rds(glue::glue("{here::here()}/data/marcap_address.rds"))

```


## 지오코딩

현재까지 준비한 데이터는 텍스트 주소정보로 이를 지도위에 뿌리기 위해서는 지오코딩을 통해 위경도를 계산해야만 한다.

### 지오코딩 함수

카카오 지도 API를 사용해서 주소 텍스트를 넣게 되면 위경도를 반환하는 함수를 제작한다.

```{r}

library(httr)
library(jsonlite)

# usethis::edit_r_environ()

get_geocodes <- function(address) {
  # HTTP 요청을 실행합니다. 
  address_res <- GET(url = 'https://dapi.kakao.com/v2/local/search/address.json',
             query = list(query = address),
             add_headers(Authorization = paste0("KakaoAK ", Sys.getenv("KAKAO_MAP_API_KEY"))))
  
  # KPMG 지리정보 데이터프레임
  address_list <- address_res %>% 
    content(as = 'text') %>% 
    fromJSON()
  
  ## 도로명주소
  long_lat <- address_list$documents$road_address %>% 
    dplyr::select(x, y) %>% 
    mutate(across(.cols = c(x, y), as.numeric))
  
  return(long_lat)
}
# 주소를 지정합니다. 
kpmg_addr <- '서울특별시 강남구 역삼동 737' 
get_geocodes(kpmg_addr)
# get_geocodes('서울 종로구 서린동 99')

```

### 지오코딩 실행

기업수가 제법 되기 때문에 데이터프레임으로 주소를 앞서 개발한 사용자정의함수 `get_geocodes()`에 보내 위경도 정보를 받아 후속 분석 업무에 효율적으로 사용할 수 있도록 준비한다.
네이버 주소에 우편번호가 포함되어 있어 이를 위경도 좌표로 변환하는 과정에 오류가 있어 이를 발견하고 확인한 후 모든 종목에 대한 데이터를 깔끔하게 정리해둔다.

```{r}
#| eval: false
marcap_geocode <- marcap_address %>% 
  mutate(geocode_data = map(본사주소, safely(get_geocodes, otherwise = NA_real_)))

marcap_geocode_tbl <- marcap_geocode %>% 
  # select(종목명, geocode_data) %>% 
  mutate(result = map(geocode_data, "result")) %>% 
  # mutate(check = map_lgl(result, is.data.frame)) %>% 
  # filter(check) %>% 
  select(종목명, 홈페이지, 시가총액, 본사주소, result) %>% 
  unnest(result) 
  
marcap_geocode_tbl %>% 
  write_rds(glue::glue("{here::here()}/data/marcap_geocode.rds"))
```


# 시각화

## 지도

시가총액 상위 기업 본사 위치를 지도에 올리기 위해서 지도가 필요하다.
이를 위해서 `leaflet` 패키지가 필요하고 전체 지도를 표시하는 것은 의미가 없기 때문에
해당 본사가 위치한 특히 본사가 몰려있는 수도권에 한정하여 지도를 가져온다.

```{r}
library(leaflet)
library(fontawesome)

marcap_geocode <- 
  read_rds(glue::glue("{here::here()}/data/marcap_geocode.rds")) 
  

## 서울경기도 중심
lat_lng_tbl <- marcap_geocode %>% 
  filter(str_detect(본사주소, "서울|경기")) %>% 
  summarise(lat_mean = mean(y),
            lng_mean = mean(x))

leaflet(marcap_geocode) %>%
  setView(lat = lat_lng_tbl$lat_mean, 
          lng = lat_lng_tbl$lng_mean, zoom=11) %>%
  addTiles()
```


## 본사위치

본사위치를 다른 곳과 달리하여 시각화를 한다.

```{r}
# 시각화 아이콘
landmark_icons <- awesomeIconList(
  "학교" = makeAwesomeIcon(
    icon = "school",
    markerColor = "blue",
    library = "fa",
    text = fa("school")
  ),
  "기업" = makeAwesomeIcon(
    icon = "walking",
    markerColor = "green",
    library = "fa",
    text = fa("walking")
  )
)

marcap_geocode %>% 
  add_row(종목명 = "한양대", 홈페이지="https://www.hanyang.ac.kr/", 시가총액 = 0,
          본사주소 = "서울 성동구 왕십리로 222", 
          x = 127.0454092, y = 37.5571759) %>% 
  mutate(구분 = ifelse(종목명 == "한양대", "학교", "기업")) %>% 
  leaflet() %>%
    setView(lat = lat_lng_tbl$lat_mean, 
            lng = lat_lng_tbl$lng_mean, zoom=11) %>%
    addProviderTiles('CartoDB.Positron') %>%
    addAwesomeMarkers(lat =~y, lng = ~x,
                      clusterOptions = markerClusterOptions(),
                      icon = ~ landmark_icons[구분],
                      popup = ~ as.character(paste0("<strong>", paste0("회사:",`종목명`),
                                                   "</strong><br>",
                                                   "-------------------------------------<br>",
                                                   "&middot; 시총: ", round(`시가총액`,1), "조<br>",
                                                   "&middot; 주소: ", `본사주소`, "<br>",
                                                   "&middot; 홈페이지: ", `홈페이지`, "<br>"
                     )))  
```


```{r}
#| echo: false
#| eval: false
# 시각화 아이콘
landmark_icons <- awesomeIconList(
  "학교" = makeAwesomeIcon(
    icon = "school",
    markerColor = "blue",
    library = "fa",
    text = fa("school")
  ),
  "기업" = makeAwesomeIcon(
    icon = "walking",
    markerColor = "green",
    library = "fa",
    text = fa("walking")
  )
)

hq_map <- marcap_geocode %>% 
  add_row(종목명 = "덕수고", 홈페이지="http://duksoo.sen.hs.kr/", 시가총액 = 0,
          본사주소 = "서울특별시 성동구 왕십리로 199", 
          x = 127.042158, y = 37.5553429) %>% 
  mutate(구분 = ifelse(종목명 == "덕수고", "학교", "기업")) %>% 
  leaflet() %>%
    setView(lat = lat_lng_tbl$lat_mean, 
            lng = lat_lng_tbl$lng_mean, zoom=11) %>%
    addProviderTiles('CartoDB.Positron') %>%
    addAwesomeMarkers(lat =~y, lng = ~x,
                      clusterOptions = markerClusterOptions(),
                      icon = ~ landmark_icons[구분],
                      popup = ~ as.character(paste0("<strong>", paste0("회사:",`종목명`),
                                                   "</strong><br>",
                                                   "-------------------------------------<br>",
                                                   "&middot; 시총: ", round(`시가총액`,1), "조<br>",
                                                   "&middot; 주소: ", `본사주소`, "<br>",
                                                   "&middot; 홈페이지: ", `홈페이지`, "<br>"
                     )))  

library(htmlwidgets)
saveWidget(hq_map, file="data/hq_map.html")
```


