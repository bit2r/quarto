---
title: "디지털 글쓰기"
subtitle: "영어듣기"
description: |
  데이터 과학자 학부모입장에서 챗GPT시대 대학에 들어갈 사람수를 살펴보자.
author:
  - name: 이광춘
    url: https://www.linkedin.com/in/kwangchunlee/
    affiliation: 한국 R 사용자회
    affiliation-url: https://github.com/bit2r
title-block-banner: true
#title-block-banner: "#562457"
format:
  html:
    theme: flatly
    code-fold: true
    code-overflow: wrap
    toc: true
    toc-depth: 3
    toc-title: 목차
    number-sections: true
    highlight-style: github    
    self-contained: false
filters:
   - lightbox
lightbox: auto
bibliography: bibliography.bib
link-citations: true
csl: apa-single-spaced.csl
knitr:
  opts_chunk: 
    message: false
    warning: false
    collapse: true
    R.options:
      knitr.graphics.auto_pdf: true
editor_options: 
  chunk_output_type: console
---

# 듣기 문제


```{r}
library(tidyverse)

html_tag_audio <- function(file, type = c("mp3")) {
  type <- match.arg(type)
  htmltools::tags$audio(
    controls = "",
    htmltools::tags$source(
      src = file,
      type = glue::glue("audio/{type}", type = type)
    )
  )
}

mp3_path <- "data/2023_3교시_영어영역_듣기평가_음원/"

mp3_files <- fs::dir_ls(mp3_path)

mp3_audio <- mp3_files[!str_detect(mp3_files, "안내")]

# html_tag_audio("data/2023_3교시_영어영역_듣기평가_음원/01_문제 01.mp3", type = "mp3")

# for(i in seq_along(mp3_audio)) {
#   question <- str_remove(mp3_audio[i], 'data/2023_3교시_영어영역_듣기평가_음원/') %>% 
#   str_remove("^\\d{1,2}_")
#   cat(paste0("### ", question, " {.unnumbered}", "\n"))
#   
#   print(html_tag_audio(mp3_audio[i], type = "mp3"))
# }
```

# 듣기평가대본

```{r}
library(pdftools)
library(gsubfn)

sources <- pdftools::pdf_text(pdf = "data/2023_3교시_영어영역_문제지/3교시_영어영역_듣기평가대본.pdf")

# sources_squish <- map_chr(sources, str_squish)
# sources_clean <- map_chr(sources_squish, str_extract, pattern = "(\\d{1,2}\\.\\s+).*")
# map_chr(sources_clean, str_remove, pattern = "-\\s+\\d{1,2}\\s+-$")

replacement <- function(x) {
  if (x == "W:") {
    return("\n\nW:")
  } else if (x == "M:") {
    return("\n\nM:")
  }
}


sources_text <- map_chr(sources, str_squish) %>% 
  map_chr(str_extract, pattern = "(\\d{1,2}\\.\\s+).*") %>% 
  map_chr(str_remove, pattern = "-\\s+\\d{1,2}\\s+-$") %>% 
  map_chr(gsubfn, pattern = "(W:|M:)", replacement = replacement) %>% 
  map_chr(str_trim) %>% 
  map_chr(str_c, "\n")

# gsubfn("(W:|M:)", replacement, sources_text)
sources_text
```


# 음원과 대본

```{r}
#| results: asis

for(i in seq_along(mp3_audio)) {
  
  question <- str_remove(mp3_audio[i], 'data/2023_3교시_영어영역_듣기평가_음원/') %>% 
  str_remove("^\\d{1,2}_") %>% 
    str_remove("\\.mp3")
  
  print(glue::glue("## {trimws(question, which='right')}", "{{.unnumbered}}", "\n"))
  
  print(html_tag_audio(mp3_audio[i], type = "mp3"))
  
  # print(cat("\n", str_remove(sources_text[i], "NULL$"), "\n\n\n"))
  # print("\n")
  print(glue::glue("{trimws(sources_text[i], which='right')} \n\n\n"))
}
```


# 문제

```{python}
# ! pip install pymupdf

import fitz

problem_file="data/2023_3교시_영어영역_문제지/3교시_영어영역_문제지.pdf"

problem_list = []

with fitz.open(problem_file) as doc:
  for page in doc:
    page_text = page.get_text()
    problem_list.append(page_text)

# problem_list
```

```{r}
library(reticulate)
library(gt)

# str_split(py$problem_list[1], "(?=\\b\\d{1,2}\\b\\.)")
problems_split <- map(py$problem_list, str_split, pattern = "\n(?=\\b\\d{1,2}\\.\\s+?\\b)") %>% 
  unlist %>% map_chr(str_trim)

problems_tbl <- problems_split[str_detect(problems_split, pattern = "^(?=\\b\\d{1,2}\\.\\s+?\\b)")] %>% 
  enframe(name = "문항", value = "문제")

```

## 홀수형

```{r}
#| results: asis

problems_odd <- problems_tbl %>% 
  filter(문항 <= 45) 

for( i in 1:nrow(problems_odd)) {
  
  print(glue::glue("### 문제 {trimws(problems_odd$문항[i], which='right')}", "{{.unnumbered}}", "\n"))

  print(glue::glue("{problems_odd$문제[i]} \n\n\n"))
  
}
```

## 짝수형

```{r}
#| results: asis

problems_even <- problems_tbl %>% 
  filter(문항 > 45)  %>% 
  mutate(문항 = 문항-45)

for( i in 1:nrow(problems_odd)) {
  
  print(glue::glue("### 문제 {trimws(problems_even$문항[i], which='right')}", "{{.unnumbered}}", "\n"))

  print(glue::glue("{problems_even$문제[i]} \n\n\n"))
  
}
```

# 정답

```{python}
import pandas as pd
import tabula
answer_file = "data/2023_3교시_영어영역_정답표.pdf"
answer = tabula.read_pdf(answer_file, pages='all')
```

## 홀수형

```{r}
odd_1 <- py$answer[[1]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(1:3) %>% 
  set_names(c("문항번호", "정답", "배점"))

odd_2 <- py$answer[[1]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(4:6) %>% 
  set_names(c("문항번호", "정답", "배점"))

odd_3 <- py$answer[[1]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(7:9) %>% 
  set_names(c("문항번호", "정답", "배점"))

odd_4 <- py$answer[[1]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(10:12) %>% 
  set_names(c("문항번호", "정답", "배점"))

odd_tbl <- bind_rows(odd_1, odd_2) %>% 
  bind_rows(odd_3) %>% 
  bind_rows(odd_4) %>% 
  filter(!is.nan(정답))

odd_tbl %>% 
  gt::gt() %>% 
  cols_align("center") %>% 
  gtExtras::gt_theme_538()
```

## 짝수형

```{r}
even_1 <- py$answer[[2]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(1:3) %>% 
  set_names(c("문항번호", "정답", "배점"))

even_2 <- py$answer[[2]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(4:6) %>% 
  set_names(c("문항번호", "정답", "배점"))

even_3 <- py$answer[[2]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(7:9) %>% 
  set_names(c("문항번호", "정답", "배점"))

even_4 <- py$answer[[2]] %>% 
  janitor::clean_names(ascii = FALSE) %>% 
  select(10:12) %>% 
  set_names(c("문항번호", "정답", "배점"))

even_tbl <- bind_rows(even_1, even_2) %>% 
  bind_rows(even_3) %>% 
  bind_rows(even_4) %>% 
  filter(!is.nan(정답))

even_tbl %>% 
  gt::gt() %>% 
  cols_align("center") %>% 
  gtExtras::gt_theme_538()
```
