{
  "hash": "3927df5c62d4cd616b2ac27ae65f117e",
  "result": {
    "markdown": "---\ntitle: \"로우코드 Shiny 앱 개발\"\ndate: \"2022-08-31\" # 날짜 설정: now, last-modified\ncategories: ['Quarto', 'Low code', 'shiny', '앱개발', 'shinyuieditor', '데이터 패키지', 'bslib', '구글 폰트', 'dashboard-builder']\ndescription: |\n  Shiny 앱개발에 Shiny 생태계를 구성하는 로우코드(Low Code)를 적극 도입하여 개발시간을 단축하고 생산성을 높이는 방법을 소개한다.\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    theme: flatly\n    code-fold: false\n    toc: true\n    toc-depth: 2\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: true\nlink-citations: yes\nfilters:\n   - lightbox      \nlightbox: auto\n---\n\n\n\n# 최근 개발 추세\n\n[출처: <https://itwiki.kr/w/로우_코드>]{.aside}\n\n로우코드는 필요한 부품을 간단한 명령으로 조합하여 시스템을 만드는 개발 방법으로, 복잡한 코딩 과정을 단순화해서 소프트웨어를 빠르게 개발 및 배포하도록 만든 일종의 개발 환경으로 소개되고 있다. \n\nShiny 앱은 2012년 처음 소개된 이후 약 10년의 세월이 흐르며 다양한 프레임워크가 등장하여 서로 경쟁하고 있다. 이 분야를 개척한 것은 Shiny가 처음이지만 R을 기본언어로 하다보니 파이썬이나 자바스크립트와 같은 다른 언어을 많이 사용하고 있는 다른 반응형 대쉬보드 프레임워크가 등장하다 보니 GitHub 별점수에서 상대적으로 밀리고 있는 것으로 보인다. React 기반한 파이썬 프레임워크 Plotly Dash, 파이썬 [Streamlit](https://streamlit.io/)이 사용자면에서 최근들어 급증하고 있는데 최근 추세를 반영하고 있다고 볼 수 있다.\n\n[출처: [Streamlit vs. Dash vs. Shiny vs. Voila vs. Flask vs. Jupyter - Comparing data dashboarding tools and frameworks](https://www.datarevenue.com/en-blog/data-dashboarding-streamlit-vs-dash-vs-shiny-vs-voila)]{.aside}\n\n![](../../fig/dashboard-solutions.png)\n\n::: {.panel-tabset}\n\n## 장점\n\n1. 프로그램 개발 시간 단축\n  - 모든 소스 코드를 작성하지 않고, 앱을 조합하여 시스템을 구축 하여 개발 기간을 단축 \n2. 개발비 절감\n  - 개발 기간을 줄이는 효과로 프로그래머의 인력이 감소 개발에 들어 가는 인건비를 절감 하는 효과\n  -   전문 개발자의 경우 필요에 따라 자동화와 불필요한 요소 생략 등을 통해 작업 효율성을 대폭 향상할 수 있다. 이런 효율성 향상은 결국 비용감소\n3. 오류가 줄어든다\n  - 프로그램밍을 직접 수행하는 부분이 적어지는 만큼 실수가 줄어 든다.\n  - 사람이 작성하는 코드의 양이 적어지면서 오류 확률이 줄어 든다.\n  - 그 결과 버그 수정 등에 걸리는 시간 단축과 비용 경감에 효과가 있다.\n4. 인력 확보가 비교적 쉽다.\n  - 엔지니어가 전문적인 실력을 갖추지 않았더라고 개발 작업이 가능.\n  - 숙련된 엔지니어에 대한 의존성이 줄어 든다.\n   \n## 단점\n\n1. 자유도가 낮다\n  -  대규모 개발에 사용의 어려움으로 인해 단순 구조 및 단일 비즈니스 프로세스에 적합하다.\n  - 개발 툴에 따라서 가능 한 기능이 다르기 때문에 각 툴에만 의존 하게 되는 단점\n2. 프로그램의 창의성 악화\n  - 로우코드에 의존하게 되면 시스템을 새로 구축 하는 프로그래머가 점점 줄어 들어 창의성을 발휘하여 개발하는 경우가 적어 질 것이다.\n3. 보안의 취약\n  - 간단한 기능을 만들때는 기본적인 보안 관리에 소홀 할 수 있다.\n   - 빠른 속도와 낮은 비용에만 너무 초점을 맞추면 관리 부족과 보안 취약점이 들어 날 수 있다.\n   \n:::\n\n시장에서 다음 시스템이 인기를 끌고 있다.\n\n1. OutSystems\n1. mendix\n1. ServiceNow\n1. Kintone\n1. KISSFLOW\n1. Appian\n1. Boomi Flow\n\n\n# Shiny 로우코드 패키지\n\nShiny가 10년이라는 오랜 시간을 거치면서 최근들어 새로운 시도가 늘고 있고 몇가지를 소개하게 되면 로우코드 Shiny 앱 개발을 가능하게 하는 패키지가 속속 도입되며 고품질 Shiny 앱을 빠른 시간내에 개발하여 생산성을 높일 수 있게 되었다.\n\n## `shinyuieditor`\n\n[`shinyuieditor`](https://rstudio.github.io/shinyuieditor/)는 2022-08-31 현재 알파버젼이지만 기존 Shiny UI 개발에 많은 노력이 든 것에 비하면 빠르고 쉽게 `ui.R` UI 부분을 제작할 수 있다.\n\n예를 들어 **Drag and Drop** 으로  UI 구성요소를 추가하는 것도 가능하다.\n\n![](../../fig/shinyuieditor-add-element.webm)\n\n그외에도 Shiny 앱 개발에 필요한 다양한 다음 작업을 수행할 수 있다.\n\n- UI 구성요소 이동\n- UI 구성요소 선택\n- UI 구성요소 삭제\n- UI 구성요소 설정사항 변경\n- 행/열 폭 확인\n- 행/열을 레이아웃 격자에 추가/삭제\n- 행/열 폭 길이조정\n- 변경사항 Undo/Redo 기능\n\n[동영상 사용방법은 [shinyuieditor How to 참고](https://rstudio.github.io/shinyuieditor/articles/how-to.html)]{.aside}\n\n`shinyuieditor` 패키지 명령어는 몇개 없는데 Shiny 앱 UI 제작을 위해 `launch_editor()` 함수를 사용해서 제작한다. 첫 선택사항에 따라 \"shiny앱명칭\" 디렉토리 아래 `app.R` 혹은 `ui.R`, `server.R` 이 생성된 것을 확인할 수 있다. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyuieditor::launch_editor(app_loc = \"shiny앱명칭\")\n```\n:::\n\n\nUI 제작이 마무리되면 `bslib` 패키지로 외양을 가꾸고 `server.R` 서버 코드를 작성하면 간단히 Shiny 앱 개발이 마무리된다.\n\n## Dashboard-Builder\n\n[Peter Gandenberger, \"Dashboard-Builder: Building Shiny Apps without writing any code\", rstudio::conf(2022), [바로가기](https://www.rstudio.com/conference/2022/talks/dashboard-builder/)]{.aside}\n\nPeter Gandenberger가 최근에 개발한 [Dashboard Builder](https://github.com/petergandenberger/dashboard-builder)는 대쉬보드를 키보드 입력없이 마우스만 사용해서 간단히 개발할 수 있다. Dashboard Builder 는 [gridstackeR](https://github.com/petergandenberger/gridstackeR) 패키지 기반하고 있다.\n\n로우코드 대쉬보드 개발 작업흐름은 다음과 같다.\n\n1. 데이터 불러오기\n1. 대쉬보드 구성요소 생성\n1. 대쉬보드 내보내기\n1. 후속작업을 통해 기능추가 및 개선 작업 수행\n\n2분 22초면 대쉬보드를 뚝딱 제작할 수 있는 사례를 다음 동영상을 통해 확인할 수 있다.\n[[DASHBOARD-BUILDER: create R-Shiny Dashboards in 2 Minutes and 22 Seconds](https://www.youtube.com/watch?v=oOKJLMAkEiw)]{.aside}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/oOKJLMAkEiw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n## `bslib` 외양\n\nShiny 앱의 외양 Look-and-Feel 을 수월히 제작할 수 있게 해주는 패키지가 [bslib](https://rstudio.github.io/bslib/index.html)로 이를 통해서 Shiny 앱 개발\n생산성을 크게 높일 수 있다.\n\n\n![](../../fig/bslib-realtime.gif)\n\n`bslib` 패키지 `bs_theme_preview()` 함수를 통해 Shiny 외양을 원하는 대로 제작할 수 있다. \n다양한 외양 관련 사항을 지정하면 관련 사항이 코드로 떨어지게 되어 이를 복사하여 Shiny 앱에 CSS 나 코드에 직접 넣어 사용할 수 있다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbs_theme_preview()\n\n# Warning: package ‘bslib’ was built under R version 4.2.1\n# \n# Attaching package: ‘bslib’\n# \n# The following object is masked from ‘package:utils’:\n# \n#     page\n# \n# Warning: package ‘rlang’ was built under R version 4.2.1\n# Using libcurl 7.64.1 with Schannel\n# This Font Awesome icon ('exclamation-triangle') does not exist:\n# * if providing a custom `html_dependency` these `name` checks can \n#   be deactivated with `verify_fa = FALSE`\n# \n# Listening on http://127.0.0.1:4337\n# \n# ####  Update your bs_theme() R code with:  #####\n# bs_theme_update(theme, primary = \"#6C8FC4\", base_font = font_collection(\"system-ui\", \n#     \"-apple-system\", \"Segoe UI\", font_google(\"Roboto\"), \"Helvetica Neue\", \n#     \"Arial\", font_google(\"Noto Sans\"), \"Liberation Sans\", \"sans-serif\", \n#     \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \n#     \"Noto Color Emoji\"))\n```\n:::\n\n\n## 데이터 패키지\n\n데이터를 별도 패키지로 묶어 관리하게 되면 Shiny 앱을 개발할 때 별도 데이터 패키지로 묶어 필요한 경우 Shiny 앱에서 불러 사용하게 되면 관리도 그렇고 개발시간도 단축시킬 수 있다.\n\n- 통계청 통계교육원 실용통계 교과서에 실린 데이터를 묶어낸 R 데이터 패키지: [`hsData`](https://r2bit.com/hsData/)\n\n# 고교 통계 패키지\n\n한국 R 사용자회 GitHub [bitSTat-HS](https://github.com/bit2r/bitStat-HS) 저장소에 로우코드 개발방법론을 Shiny 앱개발에 적용하여 고교 통계 패키지를 개발하고 있다.\n\n## UI 화면 설계\n\n파워포인트, [figma](figma.com/) 등 화면설계 도구를 사용해서 Shiny UI를 작성한다.\n\n::: column-body-outset\n::: {layout-ncol=3}\n\n![](../../fig/bitStat-HS-main.png){group=\"posts\"}\n\n![](../../fig/bitStat-HS-teacher.PNG){group=\"posts\"}\n\n![](../../fig/bitStat-HS-student.PNG){group=\"posts\"}\n\n:::\n:::\n\n## `shinyuieditor`\n\n`shinyuieditor` 패키지를 사용해서 Shiny 앱 UI 부분을 제작한다.\n\n## 서버 구현\n\n마지막으로 `server.R` 코드를 작성하여 `hsData` 데이터 패키지에 포함된 데이터셋을 선택할 경우 해당 통계 분석결과를 자동으로 실행되도록 구현한다.\n\n## 배포\n\n`shinyapps.io`에 RStudio 에서 버튼을 몇번 눌러 배포한다.\n\n- [https://r2bit.shinyapps.io/bitStat-HS/]( https://r2bit.shinyapps.io/bitStat-HS/)\n\n## 실행화면\n\n::: column-body-outset\n\n![](../../fig/BitStat-HS-student.gif)\n:::\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}